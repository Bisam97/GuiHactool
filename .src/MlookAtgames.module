' Gambas module file

Public $dir As String
Private $dirForXml As String

Public Sub setdir(dir As String)


  $dir = dir &/ "Nintendo/Contents/registered"
  $dirForXml = dir &/ "Nintendo/Contents"


End

Public Sub look() As Collection

  Dim s As String
  Dim sPFile As String
  Dim Path As String[]
  Dim Size As Long[]
  Dim r As Collection
  Dim d As String
  Dim l As Long

  r = New Collection
  Path = New String[]
  Size = New Long[]

  For Each s In Dir($dir, "", gb.Directory)
    For Each sPFile In Dir($dir &/ s)
      If Stat($dir &/ s &/ sPFile).Type = gb.Directory Then
        l = 0
        For Each d In Dir($dir &/ s &/ sPFile)
          l += Stat($dir &/ s &/ sPFile &/ d).Size
        Next
        Size.Add(l)
      Else
        Size.Add(Stat($dir &/ s &/ sPFile).Size)
      Endif
      Path.Add($dir &/ s &/ sPFile)
    Next
  Next

  r.Add(Path, "Path")
  r.Add(Size, "Size")
  r.Add(LookToInstalledTitleSDXML(Path.Copy()), "Name")
  Return r

End

Public Sub LookToInstalledTitleSDXML(Path As String[]) As String[]

  Dim xml As XmlExplorer
  Dim element As XmlElement
  Dim a As XmlElement

  If Exist(User.home &/ ".switch/SDTitles.xml") Then


    xml = New XmlExplorer( New XmlDocument(User.home &/ ".switch/SDTitles.xml"))
    For Each element In xml.Document.GetElementsByTagName("switchTitle")[0].ChildElements
      Print
      For Each a In element.ChildElements

        If Path.Find($dirForXml &/ a.Attributes["path"]) == -1 Then Break
        Path[Path.Find($dirForXml &/ a.Attributes["path"])] = a.Name & " | " & element.Attributes["name"]



      Next



    Next
  Endif
  Return Path


End

